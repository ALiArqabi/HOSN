import java.io.*;
import java.util.*;


public class snortLogReformater
{
	//Path for the log file generated by snort.
	static String alertFilePath = "/var/www/snort/snortLogs/alert";
	//Path to where to save the formated file.
	static String formatedAlertFilePath = "/var/www/snort/snortLogs/alertFormated";
	public static void main (String[] args)
	{
		File file = new File(alertFilePath);
		PrintWriter out = null;
		Scanner input = null;
		try
		{
			out = new PrintWriter(formatedAlertFilePath);
			input = new Scanner(file);
			//Read all the lines in the alert file.
			while(input.hasNext())
			{
				out.println(formateToHTMLTable(formatLine(input.nextLine())));
			}
		}
		catch (FileNotFoundException e)
		{
			//If you found an error log it to "ErrorLog" File.
			if(file == null)
				logError("The file \""+file.getName()+"\" Not Found.");
			else
				logError("No permition to write to a file.");
		}
		finally
		{
			out.flush();
			out.close();
			input.close();
		}
	}

	//This method takes a string as argument then write it to a file called "ErrorLog".
	public static void logError(String errorInfo)
	{
		File file = new File("ErrorLog");
		try
		{
			PrintWriter out = new PrintWriter(file);
			out.println(errorInfo);
		}
		catch(FileNotFoundException e)
		{
			System.out.println("File not Found and no Permition to create one.");
		}
	}
	//This method will take single log line as argument and exteract all the parts to list then return it to be used later.
	public static ArrayList<String> formatLine(String line)
	{
		//Declare a list to store all the log parts for later use.
		ArrayList<String> formatedLine = new ArrayList<String>();
		//Split the string using the string [**]
		String[] lineParts = line.split("\\[\\*\\*\\]");
		//Add first part (Time Stamp).
		formatedLine.add(lineParts[0].substring(0,lineParts[0].lastIndexOf(".")));
		//Add the second part (SID).
		String temp = lineParts[1].substring(lineParts[1].indexOf(":")+1,lineParts[1].indexOf("]"));
		formatedLine.add(temp.substring(0,temp.indexOf(":")));
		//Add the 3'rd part (Message).
		formatedLine.add(lineParts[1].substring(lineParts[1].indexOf("] ")+2,lineParts[1].length()-1));
		//Add the 4'th part (Classification).
		temp = lineParts[2].substring(lineParts[2].indexOf("Classification:")+"Classification:".length(),lineParts[2].indexOf("]"));
		formatedLine.add(temp.substring(temp.indexOf(": ")+2,temp.length()));
		//Add the 5'th part (Priority).
		temp = lineParts[2].substring(lineParts[2].indexOf("Priority:")+"Priority:".length(),lineParts[2].lastIndexOf("]"));
		formatedLine.add(temp.substring(temp.indexOf(": ")+2,temp.length()));
		//Add the 6'th part (Protocol).
		formatedLine.add(lineParts[2].substring(lineParts[2].indexOf("{")+1,lineParts[2].indexOf("}")));
		//Add the 7'th part (SrcIP and SrcPort).
		formatedLine.add(lineParts[2].substring(lineParts[2].indexOf("} ")+2,lineParts[2].indexOf(">")-2));
		//Add the final part (DesIP and DesPort).
		formatedLine.add(lineParts[2].substring(lineParts[2].indexOf(">")+2,lineParts[2].length()));

		return formatedLine;
	}

	//This method takes a list that containes all the parts of a single log line (returned by "formatLine()" method) then add HTML tags to it.
	public static String formateToHTMLTable(ArrayList<String> formatedLine)
	{
		//Declare a String to store the final results to.
		String results ="";
		// if the Priority is less than 3 change it's backgroud color to RED or BLACK otherwise.
		if(Integer.parseInt(formatedLine.get(4)) < 3)
			results+="<tr class=\"bg-danger\">\n";
		else
			results+="<tr class=\"bg-dark\">\n";
		//Go through each part and add <td></td> HTML tag to it.
		for (String field : formatedLine)
		{
			results+="\t<td>"+field+"</td>\n";
		}

		results+="</tr>\n";
		//System.out.println(results);
		return results;
	}

}
